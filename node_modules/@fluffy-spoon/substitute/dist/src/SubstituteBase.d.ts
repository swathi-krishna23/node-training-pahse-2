/// <reference types="node" />
import { inspect } from 'util';
import { PropertyType, Call } from './Utilities';
export declare class SubstituteJS {
    private _lastRegisteredSubstituteJSMethodOrProperty;
    set lastRegisteredSubstituteJSMethodOrProperty(value: string);
    get lastRegisteredSubstituteJSMethodOrProperty(): string;
    [Symbol.toPrimitive](): string;
    [Symbol.toStringTag](): string;
    [Symbol.iterator](): string;
    [inspect.custom](): string;
    valueOf(): string;
    $$typeof(): string;
    toString(): string;
    inspect(): string;
    length: string;
}
declare enum SubstituteExceptionTypes {
    CallCountMissMatch = "CallCountMissMatch",
    PropertyNotMocked = "PropertyNotMocked"
}
export declare class SubstituteException extends Error {
    type: SubstituteExceptionTypes;
    constructor(msg: string, exceptionType?: SubstituteExceptionTypes);
    static forCallCountMissMatch(callCount: {
        expected: number | null;
        received: number;
    }, property: {
        type: PropertyType;
        value: PropertyKey;
    }, calls: {
        expectedArguments: any[];
        received: Call[];
    }): SubstituteException;
    static forPropertyNotMocked(property: PropertyKey): SubstituteException;
    static generic(message: string): SubstituteException;
}
export {};

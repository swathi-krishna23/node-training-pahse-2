"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Substitute = exports.AreProxiesDisabledKey = exports.HandlerKey = void 0;
const Context_1 = require("./Context");
exports.HandlerKey = Symbol();
exports.AreProxiesDisabledKey = Symbol();
class Substitute {
    static for() {
        const objectContext = new Context_1.Context();
        return objectContext.rootProxy;
    }
    static disableFor(substitute) {
        const thisProxy = substitute; // rootProxy
        const thisExposedProxy = thisProxy[exports.HandlerKey]; // Context
        const disableProxy = (f) => {
            return function () {
                thisProxy[exports.AreProxiesDisabledKey] = true;
                const returnValue = f.call(thisExposedProxy, ...arguments);
                thisProxy[exports.AreProxiesDisabledKey] = false;
                return returnValue;
            };
        };
        return new Proxy(() => { }, {
            apply: function (_target, _this, args) {
                return disableProxy(thisExposedProxy.getStateApply)(...arguments);
            },
            set: function (_target, property, value) {
                return disableProxy(thisExposedProxy.setStateSet)(...arguments);
            },
            get: function (_target, property) {
                thisExposedProxy._initialState.handleGet(thisExposedProxy, property);
                return disableProxy(thisExposedProxy.getStateGet)(...arguments);
            }
        });
    }
}
exports.Substitute = Substitute;

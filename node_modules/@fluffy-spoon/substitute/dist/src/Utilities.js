"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.areArgumentsEqual = exports.stringifyCalls = exports.areArgumentArraysEqual = exports.stringifyArguments = exports.SubstituteMethods = exports.PropertyType = void 0;
const Arguments_1 = require("./Arguments");
const util = require("util");
var PropertyType;
(function (PropertyType) {
    PropertyType["method"] = "method";
    PropertyType["property"] = "property";
})(PropertyType = exports.PropertyType || (exports.PropertyType = {}));
var SubstituteMethods;
(function (SubstituteMethods) {
    SubstituteMethods["received"] = "received";
    SubstituteMethods["didNotReceive"] = "didNotReceive";
    SubstituteMethods["mimicks"] = "mimicks";
    SubstituteMethods["throws"] = "throws";
    SubstituteMethods["returns"] = "returns";
    SubstituteMethods["resolves"] = "resolves";
    SubstituteMethods["rejects"] = "rejects";
})(SubstituteMethods = exports.SubstituteMethods || (exports.SubstituteMethods = {}));
const seenObject = Symbol();
function stringifyArguments(args) {
    args = args.map(x => util.inspect(x));
    return args && args.length > 0 ? 'arguments [' + args.join(', ') + ']' : 'no arguments';
}
exports.stringifyArguments = stringifyArguments;
;
function areArgumentArraysEqual(a, b) {
    if (a.find(x => x instanceof Arguments_1.AllArguments) || b.find(b => b instanceof Arguments_1.AllArguments)) {
        return true;
    }
    for (let i = 0; i < Math.max(b.length, a.length); i++) {
        if (!areArgumentsEqual(b[i], a[i])) {
            return false;
        }
    }
    return true;
}
exports.areArgumentArraysEqual = areArgumentArraysEqual;
function stringifyCalls(calls) {
    if (calls.length === 0)
        return ' (no calls)';
    let output = '';
    for (let call of calls) {
        output += '\n-> call with ' + (call.length ? stringifyArguments(call) : '(no arguments)');
    }
    return output;
}
exports.stringifyCalls = stringifyCalls;
;
function areArgumentsEqual(a, b) {
    if (a instanceof Arguments_1.Argument && b instanceof Arguments_1.Argument)
        return false;
    if (a instanceof Arguments_1.AllArguments || b instanceof Arguments_1.AllArguments)
        return true;
    if (a instanceof Arguments_1.Argument)
        return a.matches(b);
    if (b instanceof Arguments_1.Argument)
        return b.matches(a);
    return deepEqual(a, b);
}
exports.areArgumentsEqual = areArgumentsEqual;
;
function deepEqual(realA, realB, objectReferences = []) {
    const a = objectReferences.includes(realA) ? seenObject : realA;
    const b = objectReferences.includes(realB) ? seenObject : realB;
    const newObjectReferences = updateObjectReferences(objectReferences, a, b);
    if (nonNullObject(a) && nonNullObject(b)) {
        if (a.constructor !== b.constructor)
            return false;
        const objectAKeys = Object.keys(a);
        if (objectAKeys.length !== Object.keys(b).length)
            return false;
        for (const key of objectAKeys) {
            if (!deepEqual(a[key], b[key], newObjectReferences))
                return false;
        }
        return true;
    }
    return a === b;
}
function updateObjectReferences(objectReferences, a, b) {
    const tempObjectReferences = [...objectReferences, nonNullObject(a) && !objectReferences.includes(a) ? a : void 0];
    return [...tempObjectReferences, nonNullObject(b) && !tempObjectReferences.includes(b) ? b : void 0];
}
function nonNullObject(value) {
    return typeof value === 'object' && value !== null;
}

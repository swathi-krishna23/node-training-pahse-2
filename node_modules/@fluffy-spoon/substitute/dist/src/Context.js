"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Context = void 0;
const util_1 = require("util");
const InitialState_1 = require("./states/InitialState");
const Substitute_1 = require("./Substitute");
const Utilities_1 = require("./Utilities");
const SetPropertyState_1 = require("./states/SetPropertyState");
const SubstituteBase_1 = require("./SubstituteBase");
class Context {
    constructor() {
        this._initialState = new InitialState_1.InitialState();
        this._setState = this._initialState;
        this._getState = this._initialState;
        this._proxy = new Proxy(SubstituteBase_1.SubstituteJS, {
            apply: (_target, _this, args) => this.getStateApply(_target, _this, args),
            set: (_target, property, value) => (this.setStateSet(_target, property, value), true),
            get: (_target, property) => this._filterAndReturnProperty(_target, property, this.getStateGet)
        });
        this._rootProxy = new Proxy(SubstituteBase_1.SubstituteJS, {
            apply: (_target, _this, args) => this.initialState.apply(this, args),
            set: (_target, property, value) => (this.initialState.set(this, property, value), true),
            get: (_target, property) => this._filterAndReturnProperty(_target, property, this.rootGet)
        });
        this._receivedProxy = new Proxy(SubstituteBase_1.SubstituteJS, {
            apply: (_target, _this, args) => this._receivedState === void 0 ? void 0 : this._receivedState.apply(this, args),
            set: (_target, property, value) => (this.setStateSet(_target, property, value), true),
            get: (_target, property) => {
                const state = this.initialState.getPropertyStates.find(getPropertyState => getPropertyState.property === property);
                if (state === void 0)
                    return this.handleNotFoundState(property);
                if (!state.isFunctionState)
                    state.get(this, property);
                this._receivedState = state;
                return this.receivedProxy;
            }
        });
    }
    _filterAndReturnProperty(target, property, getToExecute) {
        switch (property) {
            case 'constructor':
            case 'valueOf':
            case '$$typeof':
            case 'length':
            case 'toString':
            case 'inspect':
            case 'lastRegisteredSubstituteJSMethodOrProperty':
                return target.prototype[property];
            case Symbol.toPrimitive:
                return target.prototype[Symbol.toPrimitive];
            case util_1.inspect.custom:
                return target.prototype[util_1.inspect.custom];
            case Symbol.iterator:
                return target.prototype[Symbol.iterator];
            case Symbol.toStringTag:
                return target.prototype[Symbol.toStringTag];
            default:
                target.prototype.lastRegisteredSubstituteJSMethodOrProperty = property.toString();
                return getToExecute.bind(this)(target, property);
        }
    }
    handleNotFoundState(property) {
        if (this.initialState.hasExpectations && this.initialState.expectedCount !== null) {
            this.initialState.assertCallCountMatchesExpectations([], 0, Utilities_1.PropertyType.property, property, []);
            return this.receivedProxy;
        }
        throw SubstituteBase_1.SubstituteException.forPropertyNotMocked(property);
    }
    rootGet(_target, property) {
        return this.initialState.get(this, property);
    }
    getStateApply(_target, _this, args) {
        return this._getState.apply(this, args);
    }
    setStateSet(_target, property, value) {
        return this._setState.set(this, property, value);
    }
    getStateGet(_target, property) {
        if (property === Substitute_1.HandlerKey) {
            return this;
        }
        return this._getState.get(this, property);
    }
    get proxy() {
        return this._proxy;
    }
    get rootProxy() {
        return this._rootProxy;
    }
    get receivedProxy() {
        return this._receivedProxy;
    }
    get initialState() {
        return this._initialState;
    }
    set state(state) {
        if (this._setState === state)
            return;
        state instanceof SetPropertyState_1.SetPropertyState ?
            this._setState = state : this._getState = state;
        if (state.onSwitchedTo)
            state.onSwitchedTo(this);
    }
}
exports.Context = Context;

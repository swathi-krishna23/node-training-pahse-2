import { ContextState, PropertyKey } from './ContextState';
import { Context } from '../Context';
import { GetPropertyState } from './GetPropertyState';
import { SetPropertyState } from './SetPropertyState';
import { Call, PropertyType } from '../Utilities';
export declare class InitialState implements ContextState {
    private recordedGetPropertyStates;
    private recordedSetPropertyStates;
    private _expectedCount;
    private _areProxiesDisabled;
    get expectedCount(): number | undefined | null;
    get hasExpectations(): boolean;
    get setPropertyStates(): SetPropertyState[];
    get getPropertyStates(): GetPropertyState[];
    recordGetPropertyState(property: PropertyKey, getState: GetPropertyState): void;
    recordSetPropertyState(setState: SetPropertyState): void;
    constructor();
    assertCallCountMatchesExpectations(receivedCalls: Call[], receivedCount: number, type: PropertyType, propertyValue: PropertyKey, args: any[]): void | never;
    private doesCallCountMatchExpectations;
    apply(context: Context, args: any[]): void;
    set(context: Context, property: PropertyKey, value: any): void;
    get(context: Context, property: PropertyKey): any;
    private clearExpectations;
    onSwitchedTo(): void;
    handleGet(context: Context, property: PropertyKey): any;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InitialState = void 0;
const GetPropertyState_1 = require("./GetPropertyState");
const SetPropertyState_1 = require("./SetPropertyState");
const Utilities_1 = require("../Utilities");
const Substitute_1 = require("../Substitute");
const SubstituteBase_1 = require("../SubstituteBase");
class InitialState {
    constructor() {
        this.recordedGetPropertyStates = new Map();
        this.recordedSetPropertyStates = [];
        this._areProxiesDisabled = false;
        this._expectedCount = void 0;
    }
    get expectedCount() {
        return this._expectedCount;
    }
    get hasExpectations() {
        return this._expectedCount !== void 0;
    }
    get setPropertyStates() {
        return [...this.recordedSetPropertyStates];
    }
    get getPropertyStates() {
        return [...this.recordedGetPropertyStates.values()];
    }
    recordGetPropertyState(property, getState) {
        this.recordedGetPropertyStates.set(property, getState);
    }
    recordSetPropertyState(setState) {
        this.recordedSetPropertyStates.push(setState);
    }
    assertCallCountMatchesExpectations(receivedCalls, receivedCount, type, propertyValue, args) {
        const expectedCount = this._expectedCount;
        this.clearExpectations();
        if (this.doesCallCountMatchExpectations(expectedCount, receivedCount))
            return;
        const callCount = { expected: expectedCount, received: receivedCount };
        const property = { type, value: propertyValue };
        const calls = { expectedArguments: args, received: receivedCalls };
        throw SubstituteBase_1.SubstituteException.forCallCountMissMatch(callCount, property, calls);
    }
    doesCallCountMatchExpectations(expectedCount, actualCount) {
        if (expectedCount === void 0)
            return true;
        if (expectedCount === null && actualCount > 0)
            return true;
        return expectedCount === actualCount;
    }
    apply(context, args) { }
    set(context, property, value) {
        if (property === Substitute_1.AreProxiesDisabledKey) {
            this._areProxiesDisabled = value;
            return;
        }
        const existingSetState = this.recordedSetPropertyStates.find(x => x.arguments[0] === value);
        if (existingSetState) {
            return existingSetState.set(context, property, value);
        }
        const setPropertyState = new SetPropertyState_1.SetPropertyState(property, value);
        this.recordedSetPropertyStates.push(setPropertyState);
        context.state = setPropertyState;
        return context.setStateSet(context, property, value);
    }
    get(context, property) {
        switch (property) {
            case Substitute_1.AreProxiesDisabledKey:
                return this._areProxiesDisabled;
            case Utilities_1.SubstituteMethods.received:
                return (count) => {
                    this._expectedCount = count !== null && count !== void 0 ? count : null;
                    return context.receivedProxy;
                };
            case Utilities_1.SubstituteMethods.didNotReceive:
                return () => {
                    this._expectedCount = 0;
                    return context.receivedProxy;
                };
            default:
                return this.handleGet(context, property);
        }
    }
    clearExpectations() {
        this._expectedCount = void 0;
    }
    onSwitchedTo() {
        this.clearExpectations();
    }
    handleGet(context, property) {
        const existingGetState = this.getPropertyStates.find(state => state.property === property);
        if (existingGetState !== void 0) {
            context.state = existingGetState;
            return context.getStateGet(void 0, property);
        }
        const getState = new GetPropertyState_1.GetPropertyState(property);
        this.recordGetPropertyState(property, getState);
        context.state = getState;
        return context.getStateGet(void 0, property);
    }
}
exports.InitialState = InitialState;

"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDriver = exports.buildDriverConnectionOptions = void 0;
var DriverUtils_1 = require("typeorm/driver/DriverUtils");
var DriverFactory_1 = require("typeorm/driver/DriverFactory");
function buildDriverConnectionOptions(connectionOptions) {
    var driverOptions = {};
    switch (connectionOptions.type) {
        case 'mysql':
        case 'mariadb':
        case 'postgres':
        case 'cockroachdb':
        case 'mssql':
        case 'oracle':
            driverOptions = DriverUtils_1.DriverUtils.buildDriverOptions(connectionOptions.replication ? connectionOptions.replication.master : connectionOptions);
            break;
        case 'mongodb':
            driverOptions = DriverUtils_1.DriverUtils.buildMongoDBDriverOptions(connectionOptions);
            break;
        default:
            driverOptions = DriverUtils_1.DriverUtils.buildDriverOptions(connectionOptions);
    }
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign({ host: driverOptions.host, user: driverOptions.user || driverOptions.username, password: driverOptions.password, database: driverOptions.database, port: driverOptions.port }, (driverOptions.ssl ? { ssl: driverOptions.ssl } : {})), (driverOptions.url ? { url: driverOptions.url } : {})), (driverOptions.connectString ? { connectString: driverOptions.connectString } : {})), (driverOptions.sid ? { sid: driverOptions.sid } : {})), (driverOptions.serviceName ? { serviceName: driverOptions.serviceName } : {})), (connectionOptions.extra ? { extra: connectionOptions.extra } : {})), (driverOptions.domain ? { domain: driverOptions.domain } : {}));
}
exports.buildDriverConnectionOptions = buildDriverConnectionOptions;
var driversRequireDatabaseOption = [
    'sqlite',
    'better-sqlite3',
];
function createDriver(connectionOptions) {
    var fakeConnection = {
        options: __assign({ type: connectionOptions.type }, (driversRequireDatabaseOption.indexOf(connectionOptions.type) !== -1 ? {
            database: connectionOptions.database,
        } : {})),
    };
    var driverFactory = new DriverFactory_1.DriverFactory();
    return driverFactory.create(fakeConnection);
}
exports.createDriver = createDriver;
//# sourceMappingURL=utils.js.map
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dropDatabase = exports.createDatabase = void 0;
var SqliteDriver_1 = require("typeorm/driver/sqlite/SqliteDriver");
var MysqlDriver_1 = require("typeorm/driver/mysql/MysqlDriver");
var PostgresDriver_1 = require("typeorm/driver/postgres/PostgresDriver");
var CockroachDriver_1 = require("typeorm/driver/cockroachdb/CockroachDriver");
var OracleDriver_1 = require("typeorm/driver/oracle/OracleDriver");
var SqlServerDriver_1 = require("typeorm/driver/sqlserver/SqlServerDriver");
var BetterSqlite3Driver_1 = require("typeorm/driver/better-sqlite3/BetterSqlite3Driver");
var connection_1 = require("../connection");
var utils_1 = require("./utils");
var driver_1 = require("./driver");
var error_1 = require("./error");
var constants_1 = require("./constants");
var better_sqlite3_1 = require("./driver/better-sqlite3");
/**
 * Create database for specified driver in ConnectionOptions.
 *
 * @throws NotSupportedDriver
 *
 * @param connectionOptions
 * @param options
 */
function createDatabase(options, connectionOptions) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, createOrDropDatabase(constants_1.DatabaseOperation.CREATE, options, connectionOptions)];
        });
    });
}
exports.createDatabase = createDatabase;
/**
 * Drop database for specified driver in ConnectionOptions.
 *
 * @throws NotSupportedDriver
 *
 * @param connectionOptions
 * @param options
 */
function dropDatabase(options, connectionOptions) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, createOrDropDatabase(constants_1.DatabaseOperation.DELETE, options, connectionOptions)];
        });
    });
}
exports.dropDatabase = dropDatabase;
// --------------------------------------------------------
function createOrDropDatabase(operation, options, connectionOptions) {
    return __awaiter(this, void 0, void 0, function () {
        var driver, simpleConnectionOptions, customOptions;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(typeof connectionOptions === 'undefined')) return [3 /*break*/, 2];
                    return [4 /*yield*/, (0, connection_1.buildConnectionOptions)()];
                case 1:
                    connectionOptions = _a.sent();
                    _a.label = 2;
                case 2:
                    driver = (0, driver_1.createDriver)(connectionOptions);
                    simpleConnectionOptions = (0, driver_1.buildDriverConnectionOptions)(connectionOptions);
                    options = options !== null && options !== void 0 ? options : {};
                    customOptions = (0, utils_1.extendDatabaseOperationOptions)(options, connectionOptions);
                    if (driver instanceof SqliteDriver_1.SqliteDriver) {
                        if (operation === constants_1.DatabaseOperation.CREATE) {
                            return [2 /*return*/, (0, driver_1.createSQLiteDatabase)(driver, simpleConnectionOptions, customOptions)];
                        }
                        return [2 /*return*/, (0, driver_1.dropSQLiteDatabase)(driver, simpleConnectionOptions, customOptions)];
                    }
                    if (driver instanceof BetterSqlite3Driver_1.BetterSqlite3Driver) {
                        if (operation === constants_1.DatabaseOperation.CREATE) {
                            return [2 /*return*/, (0, better_sqlite3_1.createBetterSQLite3Database)(driver, simpleConnectionOptions, customOptions)];
                        }
                        return [2 /*return*/, (0, better_sqlite3_1.dropBetterSQLite3Database)(driver, simpleConnectionOptions, customOptions)];
                    }
                    if (driver instanceof MysqlDriver_1.MysqlDriver) {
                        if (operation === constants_1.DatabaseOperation.CREATE) {
                            return [2 /*return*/, (0, driver_1.createMySQLDatabase)(driver, simpleConnectionOptions, customOptions)];
                        }
                        return [2 /*return*/, (0, driver_1.dropMySQLDatabase)(driver, simpleConnectionOptions, customOptions)];
                    }
                    if (driver instanceof PostgresDriver_1.PostgresDriver) {
                        if (operation === constants_1.DatabaseOperation.CREATE) {
                            return [2 /*return*/, (0, driver_1.createPostgresDatabase)(driver, simpleConnectionOptions, customOptions)];
                        }
                        return [2 /*return*/, (0, driver_1.dropPostgresDatabase)(driver, simpleConnectionOptions, customOptions)];
                    }
                    if (driver instanceof CockroachDriver_1.CockroachDriver) {
                        if (operation === constants_1.DatabaseOperation.CREATE) {
                            return [2 /*return*/, (0, driver_1.createCockroachDBDatabase)(driver, simpleConnectionOptions, customOptions)];
                        }
                        return [2 /*return*/, (0, driver_1.dropCockroachDBDatabase)(driver, simpleConnectionOptions, customOptions)];
                    }
                    if (driver instanceof OracleDriver_1.OracleDriver) {
                        if (operation === constants_1.DatabaseOperation.CREATE) {
                            return [2 /*return*/, (0, driver_1.createOracleDatabase)(driver, simpleConnectionOptions, customOptions)];
                        }
                        return [2 /*return*/, (0, driver_1.dropOracleDatabase)(driver, simpleConnectionOptions, customOptions)];
                    }
                    if (driver instanceof SqlServerDriver_1.SqlServerDriver) {
                        if (operation === constants_1.DatabaseOperation.CREATE) {
                            return [2 /*return*/, (0, driver_1.createMsSQLDatabase)(driver, simpleConnectionOptions, customOptions)];
                        }
                        return [2 /*return*/, (0, driver_1.dropMsSQLDatabase)(driver, simpleConnectionOptions, customOptions)];
                    }
                    throw new error_1.NotSupportedDriver(connectionOptions.type);
            }
        });
    });
}
//# sourceMappingURL=module.js.map